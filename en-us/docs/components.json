{
  "filename": "components.md",
  "__html": "<h1 id=\"openkruise-components\">OpenKruise components <a class=\"header-anchor\" href=\"#openkruise-components\">#</a></h1>\n<p>When you install Kruise into a K8s cluster, it means you have created Kruise CRDs and some components.</p>\n<p><img src=\"/img/docs/components.png\" alt=\"OpenKruise components\"></p>\n<h2 id=\"crds\">CRDs <a class=\"header-anchor\" href=\"#crds\">#</a></h2>\n<p>These CRDs will be configured during Kruise installation.</p>\n<pre><code class=\"language-bash\">$ kubectl get crd | grep kruise.io\nadvancedcronjobs.apps.kruise.io                  2021-03-02T04:03:57Z\nbroadcastjobs.apps.kruise.io                     2021-03-02T04:03:57Z\nclonesets.apps.kruise.io                         2021-03-02T04:03:57Z\ndaemonsets.apps.kruise.io                        2021-03-02T04:03:57Z\nimagepulljobs.apps.kruise.io                     2021-03-02T04:03:57Z\nnodeimages.apps.kruise.io                        2021-03-02T04:03:57Z\nsidecarsets.apps.kruise.io                       2021-03-02T04:03:57Z\nstatefulsets.apps.kruise.io                      2021-03-02T04:03:57Z\nuniteddeployments.apps.kruise.io                 2021-03-02T04:03:57Z\n</code></pre>\n<h2 id=\"kruise-manager\">Kruise-manager <a class=\"header-anchor\" href=\"#kruise-manager\">#</a></h2>\n<p>Kruise-manager is a control plane component that runs controllers and webhooks, it is deployed by a Deployment in <code>kruise-system</code> namespace.</p>\n<pre><code class=\"language-bash\">$ kubectl get deploy -n kruise-system\nNAME                        READY   UP-TO-DATE   AVAILABLE   AGE\nkruise-controller-manager   2/2     2            2           4h6m\n\n$ kubectl get pod -n kruise-system -l control-plane=controller-manager\nNAME                                         READY   STATUS    RESTARTS   AGE\nkruise-controller-manager-68dc6d87cc-k9vg8   1/1     Running   0          4h6m\nkruise-controller-manager-68dc6d87cc-w7x82   1/1     Running   0          4h6m\n</code></pre>\n<!-- It can be deployed as multiple replicas with Deployment, but only one of them could become leader and start working, others will keep retrying to acquire the lock. -->\n<p>Logically, each controller like cloneset-controller or sidecarset-controller is a separate process, but to reduce complexity, they are all compiled into a single binary and run in the <code>kruise-controller-manager-xxx</code> single Pod.</p>\n<p>Besides controllers, this Pod also contains the admission webhooks for Kruise CRDs and Pod. It creates webhook configurations to configure which resources should be handled, and provides a Service for kube-apiserver calling.</p>\n<pre><code class=\"language-bash\">$ kubectl get svc -n kruise-system\nNAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nkruise-webhook-service   ClusterIP   172.24.9.234   &lt;none&gt;        443/TCP   4h9m\n</code></pre>\n<p>The <code>kruise-webhook-service</code> is much important for kube-apiserver calling.</p>\n<h2 id=\"kruise-daemon\">Kruise-daemon <a class=\"header-anchor\" href=\"#kruise-daemon\">#</a></h2>\n<p>This is a new daemon component released since Kruise v0.8.0 version.</p>\n<p>It is deployed by DaemonSet, runs on every node and manages things like image pre-download, container restarting.</p>\n<pre><code class=\"language-bash\">$ kubectl get pod -n kruise-system -l control-plane=daemon\nNAME                  READY   STATUS    RESTARTS   AGE\nkruise-daemon-6hw6d   1/1     Running   0          4h7m\nkruise-daemon-d7xr4   1/1     Running   0          4h7m\nkruise-daemon-dqp8z   1/1     Running   0          4h7m\nkruise-daemon-dv96r   1/1     Running   0          4h7m\nkruise-daemon-q7594   1/1     Running   0          4h7m\nkruise-daemon-vnsbw   1/1     Running   0          4h7m\n</code></pre>\n",
  "link": "/en-us/docs/components.html",
  "meta": {
    "title": "Components"
  }
}