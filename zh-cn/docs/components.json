{
  "filename": "components.md",
  "__html": "<h1 id=\"openkruise-%E7%BB%84%E4%BB%B6\">OpenKruise 组件 <a class=\"header-anchor\" href=\"#openkruise-%E7%BB%84%E4%BB%B6\">#</a></h1>\n<p>当你在一个 K8s 集群中安装了 Kruise，其实是创建了一些 Kruise 的 CRD 和相关组件。</p>\n<p><img src=\"/img/docs/components.png\" alt=\"OpenKruise components\"></p>\n<h2 id=\"crds\">CRDs <a class=\"header-anchor\" href=\"#crds\">#</a></h2>\n<p>以下的 CRD 会安装到你的集群中：</p>\n<pre><code class=\"language-bash\">$ kubectl get crd | grep kruise.io\nadvancedcronjobs.apps.kruise.io                  2021-03-02T04:03:57Z\nbroadcastjobs.apps.kruise.io                     2021-03-02T04:03:57Z\nclonesets.apps.kruise.io                         2021-03-02T04:03:57Z\ndaemonsets.apps.kruise.io                        2021-03-02T04:03:57Z\nimagepulljobs.apps.kruise.io                     2021-03-02T04:03:57Z\nnodeimages.apps.kruise.io                        2021-03-02T04:03:57Z\nsidecarsets.apps.kruise.io                       2021-03-02T04:03:57Z\nstatefulsets.apps.kruise.io                      2021-03-02T04:03:57Z\nuniteddeployments.apps.kruise.io                 2021-03-02T04:03:57Z\n</code></pre>\n<h2 id=\"kruise-manager\">Kruise-manager <a class=\"header-anchor\" href=\"#kruise-manager\">#</a></h2>\n<p>Kruise-manager 是一个运行 controller 和 webhook 中心组件，它通过 Deployment 部署在 <code>kruise-system</code> 命名空间中。</p>\n<pre><code class=\"language-bash\">$ kubectl get deploy -n kruise-system\nNAME                        READY   UP-TO-DATE   AVAILABLE   AGE\nkruise-controller-manager   2/2     2            2           4h6m\n\n$ kubectl get pod -n kruise-system -l control-plane=controller-manager\nNAME                                         READY   STATUS    RESTARTS   AGE\nkruise-controller-manager-68dc6d87cc-k9vg8   1/1     Running   0          4h6m\nkruise-controller-manager-68dc6d87cc-w7x82   1/1     Running   0          4h6m\n</code></pre>\n<!-- It can be deployed as multiple replicas with Deployment, but only one of them could become leader and start working, others will keep retrying to acquire the lock. -->\n<p>逻辑上来说，如 cloneset-controller/sidecarset-controller 这些的 controller 都是独立运行的。不过为了减少复杂度，它们都被打包在一个独立的二进制文件、并运行在 <code>kruise-controller-manager-xxx</code> 这个 Pod 中。</p>\n<p>除了 controller 之外，<code>kruise-controller-manager-xxx</code> 中还包含了针对 Kruise CRD 以及 Pod 资源的 admission webhook。Kruise-manager 会创建一些 webhook configurations 来配置哪些资源需要感知处理、以及提供一个 Service 来给 kube-apiserver 调用。</p>\n<pre><code class=\"language-bash\">$ kubectl get svc -n kruise-system\nNAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nkruise-webhook-service   ClusterIP   172.24.9.234   &lt;none&gt;        443/TCP   4h9m\n</code></pre>\n<p>上述的 <code>kruise-webhook-service</code> 非常重要，是提供给 kube-apiserver 调用的。</p>\n<h2 id=\"kruise-daemon\">Kruise-daemon <a class=\"header-anchor\" href=\"#kruise-daemon\">#</a></h2>\n<p>这是从 Kruise v0.8.0 版本开始提供的一个新的 daemon 组件。</p>\n<p>它通过 DaemonSet 部署到每个 Node 节点上，提供镜像预热、容器重启等功能。</p>\n<pre><code class=\"language-bash\">$ kubectl get pod -n kruise-system -l control-plane=daemon\nNAME                  READY   STATUS    RESTARTS   AGE\nkruise-daemon-6hw6d   1/1     Running   0          4h7m\nkruise-daemon-d7xr4   1/1     Running   0          4h7m\nkruise-daemon-dqp8z   1/1     Running   0          4h7m\nkruise-daemon-dv96r   1/1     Running   0          4h7m\nkruise-daemon-q7594   1/1     Running   0          4h7m\nkruise-daemon-vnsbw   1/1     Running   0          4h7m\n</code></pre>\n",
  "link": "/zh-cn/docs/components.html",
  "meta": {
    "title": "组件"
  }
}