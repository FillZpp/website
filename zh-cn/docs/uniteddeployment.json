{
  "filename": "uniteddeployment.md",
  "__html": "<h1 id=\"uniteddeployment\">UnitedDeployment <a class=\"header-anchor\" href=\"#uniteddeployment\">#</a></h1>\n<p>这个控制器提供了一个新模式来通过多个 workload 管理多个区域下的 Pod。\n这篇 <a href=\"/en-us/blog/blog3.html\">博客文章</a> 提供了对 UnitedDeployment 一个高层面的描述。</p>\n<p>在一个 Kubernetes 集群中可能存在不同的 node 类型，比如多个可用区、或不同的节点技术（比如 Virtual kueblet）等，这些不同类型的 node 上有 label/taint 标识。\nUnitedDeployment 控制器可以提供一个模板来定义应用，并通过管理多个 workload 来匹配下面不同的区域。\n每个 UnitedDeployment 下每个区域的 workload 被称为 <code>subset</code>，有一个期望的 <code>replicas</code> Pod 数量。\n目前 subset 支持使用 <code>StatefulSet</code>、<code>Advanced StatefulSet</code>、<code>CloneSet</code>、<code>Deployment</code>。</p>\n<p>API 定义: <a href=\"https://github.com/openkruise/kruise/blob/master/apis/apps/v1alpha1/uniteddeployment_types.go\">https://github.com/openkruise/kruise/blob/master/apis/apps/v1alpha1/uniteddeployment_types.go</a></p>\n<p>下面用一个简单例子来演示如何定义一个 UnitedDeployment 来管理下面三个区域的 StatefulSet，所有区域的 Pod 总数为 6。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">UnitedDeployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sample-ud</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">6</span>\n  <span class=\"hljs-attr\">revisionHistoryLimit:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">sample</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-comment\"># statefulSetTemplate or advancedStatefulSetTemplate or cloneSetTemplate or deploymentTemplate</span>\n    <span class=\"hljs-attr\">statefulSetTemplate:</span>\n      <span class=\"hljs-attr\">metadata:</span>\n        <span class=\"hljs-attr\">labels:</span>\n          <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">sample</span>\n      <span class=\"hljs-attr\">spec:</span>\n        <span class=\"hljs-attr\">selector:</span>\n          <span class=\"hljs-attr\">matchLabels:</span>\n            <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">sample</span>\n        <span class=\"hljs-attr\">template:</span>\n          <span class=\"hljs-attr\">metadata:</span>\n            <span class=\"hljs-attr\">labels:</span>\n              <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">sample</span>\n          <span class=\"hljs-attr\">spec:</span>\n            <span class=\"hljs-attr\">containers:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:alpine</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">nginx</span>\n  <span class=\"hljs-attr\">topology:</span>\n    <span class=\"hljs-attr\">subsets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">subset-a</span>\n      <span class=\"hljs-attr\">nodeSelectorTerm:</span>\n        <span class=\"hljs-attr\">matchExpressions:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">node</span>\n          <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n          <span class=\"hljs-attr\">values:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zone-a</span>\n      <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">subset-b</span>\n      <span class=\"hljs-attr\">nodeSelectorTerm:</span>\n        <span class=\"hljs-attr\">matchExpressions:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">node</span>\n          <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n          <span class=\"hljs-attr\">values:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zone-b</span>\n      <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">50</span><span class=\"hljs-string\">%</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">subset-c</span>\n      <span class=\"hljs-attr\">nodeSelectorTerm:</span>\n        <span class=\"hljs-attr\">matchExpressions:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">node</span>\n          <span class=\"hljs-attr\">operator:</span> <span class=\"hljs-string\">In</span>\n          <span class=\"hljs-attr\">values:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zone-c</span>\n  <span class=\"hljs-attr\">updateStrategy:</span>\n    <span class=\"hljs-attr\">manualUpdate:</span>\n      <span class=\"hljs-attr\">partitions:</span>\n        <span class=\"hljs-attr\">subset-a:</span> <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-attr\">subset-b:</span> <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-attr\">subset-c:</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">Manual</span>\n<span class=\"hljs-string\">...</span>\n</code></pre>\n<h2 id=\"pod-%E5%88%86%E5%8F%91%E7%AE%A1%E7%90%86\">Pod 分发管理 <a class=\"header-anchor\" href=\"#pod-%E5%88%86%E5%8F%91%E7%AE%A1%E7%90%86\">#</a></h2>\n<p>上述例子中可以看到，<code>spec.topology</code> 中可以定义 Pod 分发的规则：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// Topology defines the spread detail of each subset under UnitedDeployment.</span>\n<span class=\"hljs-comment\">// A UnitedDeployment manages multiple homogeneous workloads which are called subset.</span>\n<span class=\"hljs-comment\">// Each of subsets under the UnitedDeployment is described in Topology.</span>\n<span class=\"hljs-keyword\">type</span> Topology <span class=\"hljs-keyword\">struct</span> {\n    <span class=\"hljs-comment\">// Contains the details of each subset. Each element in this array represents one subset</span>\n    <span class=\"hljs-comment\">// which will be provisioned and managed by UnitedDeployment.</span>\n    <span class=\"hljs-comment\">// +optional</span>\n    Subsets []Subset <span class=\"hljs-string\">`json:\"subsets,omitempty\"`</span>\n}\n\n<span class=\"hljs-comment\">// Subset defines the detail of a subset.</span>\n<span class=\"hljs-keyword\">type</span> Subset <span class=\"hljs-keyword\">struct</span> {\n    <span class=\"hljs-comment\">// Indicates subset name as a DNS_LABEL, which will be used to generate</span>\n    <span class=\"hljs-comment\">// subset workload name prefix in the format '&lt;deployment-name&gt;-&lt;subset-name&gt;-'.</span>\n    <span class=\"hljs-comment\">// Name should be unique between all of the subsets under one UnitedDeployment.</span>\n    Name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"name\"`</span>\n\n    <span class=\"hljs-comment\">// Indicates the node selector to form the subset. Depending on the node selector,</span>\n    <span class=\"hljs-comment\">// pods provisioned could be distributed across multiple groups of nodes.</span>\n    <span class=\"hljs-comment\">// A subset's nodeSelectorTerm is not allowed to be updated.</span>\n    <span class=\"hljs-comment\">// +optional</span>\n    NodeSelectorTerm corev1.NodeSelectorTerm <span class=\"hljs-string\">`json:\"nodeSelectorTerm,omitempty\"`</span>\n\n    <span class=\"hljs-comment\">// Indicates the tolerations the pods under this subset have.</span>\n    <span class=\"hljs-comment\">// A subset's tolerations is not allowed to be updated.</span>\n    <span class=\"hljs-comment\">// +optional</span>\n    Tolerations []corev1.Toleration <span class=\"hljs-string\">`json:\"tolerations,omitempty\"`</span>\n\n    <span class=\"hljs-comment\">// Indicates the number of the pod to be created under this subset. Replicas could also be</span>\n    <span class=\"hljs-comment\">// percentage like '10%', which means 10% of UnitedDeployment replicas of pods will be distributed</span>\n    <span class=\"hljs-comment\">// under this subset. If nil, the number of replicas in this subset is determined by controller.</span>\n    <span class=\"hljs-comment\">// Controller will try to keep all the subsets with nil replicas have average pods.</span>\n    <span class=\"hljs-comment\">// +optional</span>\n    Replicas *intstr.IntOrString <span class=\"hljs-string\">`json:\"replicas,omitempty\"`</span>\n}\n</code></pre>\n<p>在 <code>topology.subsets</code> 里面我们指定了多个 <code>subset</code> 组，每个 subset 其实对应了一个下属的 workload。\n当一个 subset 从这个列表里增加或去除时，UnitedDeployment 控制器会创建或删除相应的 subset workload。</p>\n<ul>\n<li>\n<p>每个 subset workload 有一个独立的名字，前缀是 <code>&lt;UnitedDeployment-name&gt;-&lt;Subset-name&gt;-</code>。</p>\n</li>\n<li>\n<p>subset workload 是根据 UnitedDeployment 的 <code>spec.template</code> 做基础来创建，同时将 <code>subset</code> 中定义的一些特殊配置（如 <code>nodeSelector</code>, <code>replicas</code>）合并进去成为一个完整的 workload。</p>\n<ul>\n<li><code>subset.replicas</code> 可以设置<strong>绝对值</strong>或<strong>百分比</strong>。其中，百分比会根据 UnitedDeployment 的 <code>replicas</code> 总数计算出来 subset 需要的数量；而如果不设置这个 <code>subset.replicas</code>，控制器会根据总数划分给每个 subset 对应的数量。</li>\n<li><code>subset.nodeSelector</code> 会合并到 subset workload 的 <code>spec.template</code> 下面，因此这个 workload 创建出来的 Pod 都带有对应的调度规则。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"pod-%E6%9B%B4%E6%96%B0%E7%AE%A1%E7%90%86\">Pod 更新管理 <a class=\"header-anchor\" href=\"#pod-%E6%9B%B4%E6%96%B0%E7%AE%A1%E7%90%86\">#</a></h2>\n<p>如果用户修改了 <code>spec.template</code> 下面的字段，相当于触发了升级流程。\n控制器会把新的 template 更新到各个 subset workload 里面，来触发 subset 控制器升级 Pod。</p>\n<p>同时，如果 subset workload 支持 <code>partition</code> 策略（目前可用的 <code>AdvancedStatefulSet</code>, <code>StatefulSet</code> 都是支持的），还可以使用 <code>manual</code> 升级策略。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// UnitedDeploymentUpdateStrategy defines the update performance</span>\n<span class=\"hljs-comment\">// when template of UnitedDeployment is changed.</span>\n<span class=\"hljs-keyword\">type</span> UnitedDeploymentUpdateStrategy <span class=\"hljs-keyword\">struct</span> {\n    <span class=\"hljs-comment\">// Type of UnitedDeployment update strategy.</span>\n    <span class=\"hljs-comment\">// Default is Manual.</span>\n    <span class=\"hljs-comment\">// +optional</span>\n    Type UpdateStrategyType <span class=\"hljs-string\">`json:\"type,omitempty\"`</span>\n    <span class=\"hljs-comment\">// Includes all of the parameters a Manual update strategy needs.</span>\n    <span class=\"hljs-comment\">// +optional</span>\n    ManualUpdate *ManualUpdate <span class=\"hljs-string\">`json:\"manualUpdate,omitempty\"`</span>\n}\n\n<span class=\"hljs-comment\">// ManualUpdate is a update strategy which allows users to control the update progress</span>\n<span class=\"hljs-comment\">// by providing the partition of each subset.</span>\n<span class=\"hljs-keyword\">type</span> ManualUpdate <span class=\"hljs-keyword\">struct</span> {\n    <span class=\"hljs-comment\">// Indicates number of subset partition.</span>\n    <span class=\"hljs-comment\">// +optional</span>\n    Partitions <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int32</span> <span class=\"hljs-string\">`json:\"partitions,omitempty\"`</span>\n}\n</code></pre>\n<p>通过 <code>manual</code> 升级策略，用户可以指定 UnitedDeployment 下面每个 subset workload 的灰度升级数量，控制器会把不同的 <code>partition</code> 数值同步给对应的 subset workload 里面。</p>\n",
  "link": "/zh-cn/docs/uniteddeployment.html",
  "meta": {
    "title": "UnitedDeployment"
  }
}