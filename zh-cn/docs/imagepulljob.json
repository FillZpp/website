{
  "filename": "imagepulljob.md",
  "__html": "<h1 id=\"imagepulljob-%26-nodeimage\">ImagePullJob &amp; NodeImage <a class=\"header-anchor\" href=\"#imagepulljob-%26-nodeimage\">#</a></h1>\n<p>NodeImage 和 ImagePullJob 是从 Kruise v0.8.0 版本开始提供的 CRD。</p>\n<p>Kruise 会自动为每个 Node 创建一个 NodeImage，它包含了哪些镜像需要在这个 Node 上做预热。</p>\n<p>用户能创建 ImagePullJob 对象，来指定一个镜像要在哪些 Node 上做预热。</p>\n<p><img src=\"/img/docs/imagepulling.png\" alt=\"Image Pulling\"></p>\n<h2 id=\"nodeimage%3A-the-low-level-api\">NodeImage: The low-level API <a class=\"header-anchor\" href=\"#nodeimage%3A-the-low-level-api\">#</a></h2>\n<p>NodeImage 是一个 <strong>cluster-scope</strong> 的资源。</p>\n<p>API 定义: <a href=\"https://github.com/openkruise/kruise/blob/master/apis/apps/v1alpha1/nodeimage_types.go\">https://github.com/openkruise/kruise/blob/master/apis/apps/v1alpha1/nodeimage_types.go</a></p>\n<p>当 Kruise 被安装后，nodeimage-controller 会自动为每个 Node 创建一个同名的 NodeImage。\n并且当 Node 发生伸缩时，nodeimage-controller 也会对应的创建或删除 NodeImage。</p>\n<p>除此之外，nodeimage-controller 也会将 Node 上的 labels 标签持续同步到 NodeImage 上面，因此对应的 NodeImage 与 Node 拥有相同的名字和标签。\n用户可以用 Node 名字来查询一个 NodeImage，或者用 Node labels 做 selector 来查询一批 NodeImage。</p>\n<p>通常来说一个空的 NodeImage 如下：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">NodeImage</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">kubernetes.io/arch:</span> <span class=\"hljs-string\">amd64</span>\n    <span class=\"hljs-attr\">kubernetes.io/os:</span> <span class=\"hljs-string\">linux</span>\n    <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">node-xxx</span>\n  <span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">spec:</span> <span class=\"hljs-string\">{}</span>\n<span class=\"hljs-attr\">status:</span>\n  <span class=\"hljs-attr\">desired:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">failed:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">pulling:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">succeeded:</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<p>如果你希望在这个节点上拉去一个 <code>ubuntu:latest</code> 镜像，你可以有两种方式</p>\n<ol>\n<li>执行 <code>kubectl edit nodeimage node-xxx</code> 并将以下写入其中（忽略注释）:</li>\n</ol>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">images:</span>\n    <span class=\"hljs-attr\">ubuntu:</span>  <span class=\"hljs-comment\"># 镜像 name</span>\n      <span class=\"hljs-attr\">tags:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-string\">latest</span>  <span class=\"hljs-comment\"># 镜像 tag</span>\n        <span class=\"hljs-attr\">pullPolicy:</span>\n          <span class=\"hljs-attr\">ttlSecondsAfterFinished:</span> <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># [required] 拉取完成（成功或失败）超过 300s 后，将这个任务从 NodeImage 中清除</span>\n          <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">600</span>           <span class=\"hljs-comment\"># [optional] 每一次拉取的超时时间, 默认为 600</span>\n          <span class=\"hljs-attr\">backoffLimit:</span> <span class=\"hljs-number\">3</span>               <span class=\"hljs-comment\"># [optional] 拉取的重试次数，默认为 3</span>\n          <span class=\"hljs-attr\">activeDeadlineSeconds:</span> <span class=\"hljs-number\">1200</span>   <span class=\"hljs-comment\"># [optional] 整个任务的超时时间，无默认值</span>\n</code></pre>\n<ol start=\"2\">\n<li><code>kubectl patch nodeimage node-xxx --type=merge -p '{&quot;spec&quot;:{&quot;images&quot;:{&quot;ubuntu&quot;:{&quot;tags&quot;:[{&quot;tag&quot;:&quot;latest&quot;,&quot;pullPolicy&quot;:{&quot;ttlSecondsAfterFinished&quot;:300}}]}}}}'</code></li>\n</ol>\n<p>你可以执行 <code>kubectl get nodeimage node-xxx -o yaml</code>，从 status 中看到拉取进度以及结果，并且你会发现拉取完成 600s 后任务会被清除。</p>\n<p><strong>NodeImage 是一个偏底层的 API，一般只在你要明确在某一个节点上做一次预热的时候才使用，否则你应该使用 ImagePullJob 来指定某个镜像在一批节点上做预热。</strong></p>\n<h2 id=\"imagepulljob%3A-the-high-level-api\">ImagePullJob: The high-level API <a class=\"header-anchor\" href=\"#imagepulljob%3A-the-high-level-api\">#</a></h2>\n<p>ImagePullJob 是一个 <strong>namespaced-scope</strong> 的资源。</p>\n<p>API 定义: <a href=\"https://github.com/openkruise/kruise/blob/master/apis/apps/v1alpha1/imagepulljob_types.go\">https://github.com/openkruise/kruise/blob/master/apis/apps/v1alpha1/imagepulljob_types.go</a></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ImagePullJob</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">job-with-always</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:1.9.1</span>   <span class=\"hljs-comment\"># [required] 完整的镜像名 name:tag</span>\n  <span class=\"hljs-attr\">parallelism:</span> <span class=\"hljs-number\">10</span>      <span class=\"hljs-comment\"># [optional] 最大并发拉取的节点梳理, 默认为 1</span>\n  <span class=\"hljs-attr\">selector:</span>            <span class=\"hljs-comment\"># [optional] 指定节点的 名字列表 或 标签选择器 (只能设置其中一种)</span>\n    <span class=\"hljs-attr\">names:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node-1</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node-2</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">node-type:</span> <span class=\"hljs-string\">xxx</span>\n  <span class=\"hljs-attr\">completionPolicy:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">Always</span>                  <span class=\"hljs-comment\"># [optional] 默认为 Always</span>\n    <span class=\"hljs-attr\">activeDeadlineSeconds:</span> <span class=\"hljs-number\">1200</span>   <span class=\"hljs-comment\"># [optional] 无默认值, 只对 Alway 类型生效</span>\n    <span class=\"hljs-attr\">ttlSecondsAfterFinished:</span> <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># [optional] 无默认值, 只对 Alway 类型生效</span>\n  <span class=\"hljs-attr\">pullPolicy:</span>                     <span class=\"hljs-comment\"># [optional] 默认 backoffLimit=3, timeoutSeconds=600</span>\n    <span class=\"hljs-attr\">backoffLimit:</span> <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">300</span>\n</code></pre>\n<p>你可以在 <code>selector</code> 字段中指定节点的 名字列表 或 标签选择器 <strong>(只能设置其中一种)</strong>，如果没有设置 <code>selector</code> 则会选择所有节点做预热。</p>\n<p>同时，ImagePullJob 有两种 completionPolicy 类型:</p>\n<ul>\n<li><code>Always</code> 表示这个 job 是一次性预热，不管成功、失败都会结束\n<ul>\n<li><code>activeDeadlineSeconds</code>: 整个 job 的 deadline 结束时间</li>\n<li><code>ttlSecondsAfterFinished</code>: 结束后超过这个时间，自动清理删除 job</li>\n</ul>\n</li>\n<li><code>Never</code> 表示这个 job 是长期运行、不会结束，并且会每天都会在匹配的节点上重新预热一次指定的镜像</li>\n</ul>\n<h3 id=\"%E9%85%8D%E7%BD%AE-secrets\">配置 secrets <a class=\"header-anchor\" href=\"#%E9%85%8D%E7%BD%AE-secrets\">#</a></h3>\n<p>如果这个镜像来自一个私有仓库，你可能需要配置一些 secret：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">pullSecrets:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">secret-name1</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">secret-name2</span>\n</code></pre>\n<p>因为 ImagePullJob 是一种 namespaced-scope 资源，这些 secret 必须存在 ImagePullJob 所在的 namespace 中。\n然后你只需要在 <code>pullSecrets</code> 字段中写上这些 secret 的名字即可。</p>\n",
  "link": "/zh-cn/docs/imagepulljob.html",
  "meta": {
    "title": "ImagePullJob"
  }
}