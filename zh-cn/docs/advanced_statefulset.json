{
  "filename": "advanced_statefulset.md",
  "__html": "<h1 id=\"advanced-statefulset\">Advanced StatefulSet <a class=\"header-anchor\" href=\"#advanced-statefulset\">#</a></h1>\n<p>这个控制器基于原生 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">StatefulSet</a> 上增强了发布能力，比如 maxUnavailable 并行发布、原地升级等。</p>\n<p>注意 <code>Advanced StatefulSet</code> 是一个 CRD，kind 名字也是 <code>StatefulSet</code>，但是 apiVersion 是 <code>apps.kruise.io/v1alpha1</code> 和 <code>apps.kruise.io/v1beta1</code>。\n这个 CRD 的所有默认字段、默认行为与原生 StatefulSet 完全一致，除此之外还提供了一些 optional 字段来扩展增强的策略。</p>\n<p>因此，用户从原生 <code>StatefulSet</code> 迁移到 <code>Advanced StatefulSet</code>，只需要把 <code>apiVersion</code> 修改后提交即可：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-bullet\">-</span>  <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-string\">+</span>  <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n   <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n   <span class=\"hljs-attr\">metadata:</span>\n     <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sample</span>\n   <span class=\"hljs-attr\">spec:</span>\n     <span class=\"hljs-comment\">#...</span>\n</code></pre>\n<p>注意从 Kruise 0.7.0 开始，Advanced StatefulSet 版本升级到了 <code>v1beta1</code>，并与 <code>v1alpha1</code> 兼容。对于低于 v0.7.0 版本的 Kruise，只能使用 <code>v1alpha1</code>。</p>\n<h2 id=\"maxunavailable-%E7%AD%96%E7%95%A5\"><code>MaxUnavailable</code> 策略 <a class=\"header-anchor\" href=\"#maxunavailable-%E7%AD%96%E7%95%A5\">#</a></h2>\n<p>Advanced StatefulSet 在 <code>RollingUpdateStatefulSetStrategy</code> 中新增了 <code>maxUnavailable</code> 策略来支持并行 Pod 发布，它会保证发布过程中最多有多少个 Pod 处于不可用状态。注意，<code>maxUnavailable</code> 只能配合 podManagementPolicy 为 <code>Parallel</code> 来使用。</p>\n<p>这个策略的效果和 <code>Deployment</code> 中的类似，但是可能会导致发布过程中的 order 顺序不能严格保证。\n如果不配置 <code>maxUnavailable</code>，它的默认值为 1，也就是和原生 <code>StatefulSet</code> 一样只能 one by one 串行发布 Pod，即使把 podManagementPolicy 配置为 <code>Parallel</code> 也是这样。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-attr\">podManagementPolicy:</span> <span class=\"hljs-string\">Parallel</span>\n  <span class=\"hljs-attr\">updateStrategy:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">RollingUpdate</span>\n    <span class=\"hljs-attr\">rollingUpdate:</span>\n      <span class=\"hljs-attr\">maxUnavailable:</span> <span class=\"hljs-number\">20</span><span class=\"hljs-string\">%</span>\n</code></pre>\n<p>比如说，一个 Advanced StatefulSet 下面有 P0 到 P4 五个 Pod，并且应用能容忍 3 个副本不可用。\n当我们把 StatefulSet 里的 Pod 升级版本的时候，可以通过以下步骤来做：</p>\n<ol>\n<li>设置 <code>maxUnavailable=3</code></li>\n<li>(可选) 如果需要灰度升级，设置 <code>partition=4</code>。Partition 默认的意思是 order 大于等于这个数值的 Pod 才会更新，在这里就只会更新 P4，即使我们设置了 <code>maxUnavailable=3</code>。</li>\n<li>在 P4 升级完成后，把 <code>partition</code> 调整为 0。此时，控制器会同时升级 P1、P2、P3 三个 Pod。注意，如果是原生 <code>StatefulSet</code>，只能串行升级 P3、P2、P1。</li>\n<li>一旦这三个 Pod 中有一个升级完成了，控制器会立即开始升级 P0。</li>\n</ol>\n<h2 id=\"in-place-pod-update-strategy\"><code>In-Place</code> Pod Update Strategy <a class=\"header-anchor\" href=\"#in-place-pod-update-strategy\">#</a></h2>\n<p>Advanced StatefulSet 增加了 <code>podUpdatePolicy</code> 来允许用户指定重建升级还是原地升级。</p>\n<ul>\n<li><code>ReCreate</code>: 控制器会删除旧 Pod 和它的 PVC，然后用新版本重新创建出来。</li>\n<li><code>InPlaceIfPossible</code>: 控制器会优先尝试原地升级 Pod，如果不行再采用重建升级。目前，只有修改 <code>spec.template.metadata.*</code> 和 <code>spec.template.spec.containers[x].image</code> 这些字段才可以走原地升级。</li>\n<li><code>InPlaceOnly</code>: 控制器只允许采用原地升级。因此，用户只能修改上一条中的限制字段，如果尝试修改其他字段会被 Kruise 拒绝。</li>\n</ul>\n<p>当一个 Pod 被原地升级时，控制器会先把 Pod status 中修改为 not-ready 状态，然后再更新 Pod spec 中的 image 字段来触发 Kubelet 重建对应的容器。\n不过这样可能存在的一个风险：有时候 Kubelet 重建容器太快，还没等到其他控制器如 endpoints-controller 感知到 Pod not-ready，可能会导致流量受损。</p>\n<p>因此我们又在原地升级中提供了 <strong>graceful period</strong> 选项，作为优雅原地升级的策略。用户如果配置了 <code>gracePeriodSeconds</code> 这个字段，控制器在原地升级的过程中会先把 Pod status 改为 not-ready，然后等一段时间（<code>gracePeriodSeconds</code>），最后再去修改 Pod spec 中的镜像版本。\n这样，就为 endpoints-controller 这些控制器留出了充足的时间来将 Pod 从 endpoints 端点列表中去除。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-attr\">podManagementPolicy:</span> <span class=\"hljs-string\">Parallel</span>\n  <span class=\"hljs-attr\">updateStrategy:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">RollingUpdate</span>\n    <span class=\"hljs-attr\">rollingUpdate:</span>\n      <span class=\"hljs-attr\">podUpdatePolicy:</span> <span class=\"hljs-string\">InPlaceIfPossible</span>\n      <span class=\"hljs-attr\">inPlaceUpdateStrategy:</span>\n        <span class=\"hljs-attr\">gracePeriodSeconds:</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<p><strong>更重要的是</strong>，如果使用 <code>InPlaceIfPossible</code> 或 <code>InPlaceOnly</code> 策略，必须要增加一个 <code>InPlaceUpdateReady</code> readinessGate，用来在原地升级的时候控制器将 Pod 设置为 NotReady。</p>\n<p>一个完整的原地升级 StatefulSet 例子如下：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sample</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">3</span>\n  <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">fake-service</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">sample</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">sample</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">readinessGates:</span>\n         <span class=\"hljs-comment\"># A new condition that ensures the pod remains at NotReady state while the in-place update is happening</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">conditionType:</span> <span class=\"hljs-string\">InPlaceUpdateReady</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">main</span>\n        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nginx:alpine</span>\n  <span class=\"hljs-attr\">podManagementPolicy:</span> <span class=\"hljs-string\">Parallel</span> <span class=\"hljs-comment\"># allow parallel updates, works together with maxUnavailable</span>\n  <span class=\"hljs-attr\">updateStrategy:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">RollingUpdate</span>\n    <span class=\"hljs-attr\">rollingUpdate:</span>\n      <span class=\"hljs-comment\"># Do in-place update if possible, currently only image update is supported for in-place update</span>\n      <span class=\"hljs-attr\">podUpdatePolicy:</span> <span class=\"hljs-string\">InPlaceIfPossible</span>\n      <span class=\"hljs-comment\"># Allow parallel updates with max number of unavailable instances equals to 2</span>\n      <span class=\"hljs-attr\">maxUnavailable:</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n<h2 id=\"%E5%8D%87%E7%BA%A7%E9%A1%BA%E5%BA%8F\">升级顺序 <a class=\"header-anchor\" href=\"#%E5%8D%87%E7%BA%A7%E9%A1%BA%E5%BA%8F\">#</a></h2>\n<p>Advanced StatefulSet 在 <code>spec.updateStrategy.rollingUpdate</code> 下面新增了 <code>unorderedUpdate</code> 结构，提供给不按 order 顺序的升级策略。\n如果 <code>unorderedUpdate</code> 不为空，所有 Pod 的发布顺序就不一定会按照 order 顺序了。注意，<code>unorderedUpdate</code> 只能配合 Parallel podManagementPolicy 使用。</p>\n<p>目前，<code>unorderedUpdate</code> 下面只包含 <code>priorityStrategy</code> 一个优先级策略。</p>\n<h3 id=\"%E4%BC%98%E5%85%88%E7%BA%A7%E7%AD%96%E7%95%A5\">优先级策略 <a class=\"header-anchor\" href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E7%AD%96%E7%95%A5\">#</a></h3>\n<p>这个策略定义了控制器计算 Pod 发布优先级的规则，所有需要更新的 Pod 都会通过这个优先级规则计算后排序。\n目前 <code>priority</code> 可以通过 weight(权重) 和 order(序号) 两种方式来指定。</p>\n<ul>\n<li><code>weight</code>: Pod 优先级是由所有 weights 列表中的 term 来计算 match selector 得出。如下：</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-attr\">updateStrategy:</span>\n    <span class=\"hljs-attr\">rollingUpdate:</span>\n      <span class=\"hljs-attr\">unorderedUpdate:</span>\n        <span class=\"hljs-attr\">priorityStrategy:</span>\n          <span class=\"hljs-attr\">weightPriority:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">weight:</span> <span class=\"hljs-number\">50</span>\n            <span class=\"hljs-attr\">matchSelector:</span>\n              <span class=\"hljs-attr\">matchLabels:</span>\n                <span class=\"hljs-attr\">test-key:</span> <span class=\"hljs-string\">foo</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">weight:</span> <span class=\"hljs-number\">30</span>\n            <span class=\"hljs-attr\">matchSelector:</span>\n              <span class=\"hljs-attr\">matchLabels:</span>\n                <span class=\"hljs-attr\">test-key:</span> <span class=\"hljs-string\">bar</span>\n</code></pre>\n<ul>\n<li><code>order</code>: Pod 优先级是由 orderKey 的 value 决定，这里要求对应的 value 的结尾能解析为 int 值。比如 value &quot;5&quot; 的优先级是 5，value &quot;sts-10&quot; 的优先级是 10。</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-attr\">updateStrategy:</span>\n    <span class=\"hljs-attr\">rollingUpdate:</span>\n      <span class=\"hljs-attr\">unorderedUpdate:</span>\n        <span class=\"hljs-attr\">priorityStrategy:</span>\n          <span class=\"hljs-attr\">orderPriority:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">orderedKey:</span> <span class=\"hljs-string\">some-label-key</span>\n</code></pre>\n<h2 id=\"%E5%8F%91%E5%B8%83%E6%9A%82%E5%81%9C\">发布暂停 <a class=\"header-anchor\" href=\"#%E5%8F%91%E5%B8%83%E6%9A%82%E5%81%9C\">#</a></h2>\n<p>用户可以通过设置 paused 为 true 暂停发布，不过控制器还是会做 replicas 数量管理：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-attr\">updateStrategy:</span>\n    <span class=\"hljs-attr\">rollingUpdate:</span>\n      <span class=\"hljs-attr\">paused:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h2 id=\"%E5%BA%8F%E5%8F%B7%E4%BF%9D%E7%95%99%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">序号保留（跳过） <a class=\"header-anchor\" href=\"#%E5%BA%8F%E5%8F%B7%E4%BF%9D%E7%95%99%EF%BC%88%E8%B7%B3%E8%BF%87%EF%BC%89\">#</a></h2>\n<p>从 Advanced StatefulSet 的 v1beta1 版本开始（Kruise &gt;= v0.7.0），支持序号保留功能。</p>\n<p>通过在 <code>reserveOrdinals</code> 字段中写入需要保留的序号，Advanced StatefulSet 会自动跳过创建这些序号的 Pod。如果 Pod 已经存在，则会被删除。\n注意，<code>spec.replicas</code> 是期望运行的 Pod 数量，<code>spec.reserveOrdinals</code> 是要跳过的序号。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">4</span>\n  <span class=\"hljs-attr\">reserveOrdinals:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>对于一个 <code>replicas=4, reserveOrdinals=[1]</code> 的 Advanced StatefulSet，实际运行的 Pod 序号为 <code>[0,2,3,4]</code>。</p>\n<ul>\n<li>如果要把 Pod-3 做迁移并保留序号，则把 <code>3</code> 追加到 <code>reserveOrdinals</code> 列表中。控制器会把 Pod-3 删除并创建 Pod-5（此时运行中 Pod 为 <code>[0,2,4,5]</code>）。</li>\n<li>如果只想删除 Pod-3，则把 <code>3</code> 追加到 <code>reserveOrdinals</code> 列表并同时把 <code>replicas</code> 减一修改为 <code>3</code>。控制器会把 Pod-3 删除（此时运行中 Pod 为 <code>[0,2,4]</code>）。</li>\n</ul>\n",
  "link": "/zh-cn/docs/advanced_statefulset.html",
  "meta": {
    "title": "Advanced StatefulSet"
  }
}